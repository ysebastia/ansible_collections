---
- name: Test if backuppc exist on {{ backuppc_serverhost }}
  ansible.builtin.getent:
    database: passwd
    split: ":"
    key: "{{ backuppc_user }}"
    fail_key: false
  delegate_to: "{{ backuppc_serverhost }}"
- name: Create backup directory for host
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ backuppc_directory_backup }}/pc/{{ inventory_hostname_short }}"
    mode: "0750"
    owner: "{{ backuppc_user }}"
    group: "{{ backuppc_user }}"
  delegate_to: "{{ backuppc_serverhost }}"
  when:
    - backuppc_user in getent_passwd.keys()
    - ansible_facts.getent_passwd[backuppc_user] != None
- name: Create configuration for host
  become: true
  ansible.builtin.template:
    src: linux.pl.j2
    dest: "{{ backuppc_directory_backup }}/pc/{{ inventory_hostname_short }}/config.pl"
    mode: "0644"
  delegate_to: "{{ backuppc_serverhost }}"
  when:
    - backuppc_user in getent_passwd.keys()
    - ansible_facts.getent_passwd[backuppc_user] != None
- name: Declare host in server configuration
  become: true
  ansible.builtin.lineinfile:
    path: /etc/backuppc/hosts
    regexp: ^{{ inventory_hostname_short }}\s
    line: "{{ inventory_hostname_short }} 0 {{ backuppc_owner }}"
  delegate_to: "{{ backuppc_serverhost }}"
  when:
    - backuppc_user in getent_passwd.keys()
    - ansible_facts.getent_passwd[backuppc_user] != None
- name: Check if SSH key of server exists
  ansible.builtin.stat:
    path: "{{ inventory_dir }}/files/pubkeys/{{ backuppc_serverhost }}.id_ecdsa.pub"
  register: plug_result
  delegate_to: localhost
  become: false
- name: Deploy SSH key if exists
  become: true
  ansible.posix.authorized_key:
    user: backup
    state: present
    key: "{{ lookup('file', plug_result.stat.path) }}"
  when: plug_result.stat.exists
